//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.2 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.04.21 at 01:57:40 PM AEST 
//


package com.sungung.edi.binding.d95b;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for E4493-DeliveryRequirementsCoded.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="E4493-DeliveryRequirementsCoded"&gt;
 *   &lt;restriction base="{http://www.ibm.com/dfdl/edi/un/edifact/D95B}alpha0-3"&gt;
 *     &lt;enumeration value="BK"/&gt;
 *     &lt;enumeration value="CD"/&gt;
 *     &lt;enumeration value="DA"/&gt;
 *     &lt;enumeration value="DB"/&gt;
 *     &lt;enumeration value="DD"/&gt;
 *     &lt;enumeration value="IS"/&gt;
 *     &lt;enumeration value="P1"/&gt;
 *     &lt;enumeration value="P2"/&gt;
 *     &lt;enumeration value="SC"/&gt;
 *     &lt;enumeration value="SF"/&gt;
 *     &lt;enumeration value="SP"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "E4493-DeliveryRequirementsCoded")
@XmlEnum
public enum E4493DeliveryRequirementsCoded {

    BK("BK"),
    CD("CD"),
    DA("DA"),
    DB("DB"),
    DD("DD"),
    IS("IS"),
    @XmlEnumValue("P1")
    P_1("P1"),
    @XmlEnumValue("P2")
    P_2("P2"),
    SC("SC"),
    SF("SF"),
    SP("SP");
    private final String value;

    E4493DeliveryRequirementsCoded(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static E4493DeliveryRequirementsCoded fromValue(String v) {
        for (E4493DeliveryRequirementsCoded c: E4493DeliveryRequirementsCoded.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
